-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var elifPat = memo $ eta syntax ( kElif xi=exp kThen yi=scopeExpr { [xi, yi] } );

var primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
(* Assignment *)
                                      loc=pos kRead x=inbr[s("("), lident, s(")")]      {fun (a) {assertVoid (a, Read (x), loc)}}                    |
                                      loc=pos kWrite e=inbr[s("("), exp, s(")")]        {fun (a) {assertVoid (a, Write (e (Val)), loc)}}             |
                                      e=inbr[s("("), scopeExpr, s(")")]                 {e}                                                          |
                                      loc=pos kWhile x=exp kDo y=scopeExpr kOd          {fun (a) {assertVoid (a, While (x (Val), y (Void)), loc)}}   |
                                      loc=pos kIf x1=exp kThen y1=scopeExpr a=(elifPat)* b=(kElse yLast=scopeExpr { yLast })? kFi {
                                          fun (attr) {
                                            var assert = fun (x1, x2, x3) { x2 };
                                            var start =
                                              case b of
                                                Some (y) -> If (x1 (Val), y1 (attr), y (attr))
                                              | _ -> assert := assertVoid; If (x1 (Val), y1 (Void), Skip)
                                              esac;
                                            var result = foldl (
                                              fun (acc, x) {
                                                case acc of
                                                  If (e, s1, s2) -> If (e, s1, If (x[0] (Val), x[1] (attr), s2))
                                                esac
                                              }
                                            , start, a);
                                            assert (attr, result, loc)
                                          }
                                        } |
                                      loc=pos kDo y=scopeExpr kWhile x=exp kOd {
                                        fun (a) {
                                          distributeScope(
                                            y (Void), 
                                            fun (y) { assertVoid (a, DoWhile (y, x (Val)), loc) }
                                          )
                                        }
                                      } |
                                      loc=pos kSkip                                      {fun (a) {assertVoid (a, Skip, loc)}}                        |
                                      loc=pos kFor ss1=scopeExpr s[","] e=exp s[","] s2=exp kDo s3=exp kOd {
                                          fun (a) {
                                            distributeScope (
                                              ss1 (Void),
                                              fun (s1) {
                                                var result = Seq (
                                                  s1,
                                                  While (e (Val), Seq (s3 (Void), s2 (Void)))
                                                );
                                                assertVoid (a, result, loc)
                                              }
                                            )
                                          }
                                        }
                                      ),
(* End *)
      basic      = memo $ eta (expr ({[Right, {[s (":="),
                                                fun (l, loc, r) {
                                                  fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                }]}],
                                      [Left , map (binop, {"!!"})],
                                      [Left , map (binop, {"&&"})],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e) 
                                                                        esac
                                                                      } (case e of 
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Var (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),                                    
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});

--logOn ()

(*
var elifPat = memo $ eta syntax ( kElif xi=exp kThen yi=exp { [xi, yi] } );

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  loc=pos kRead x=inbr[s("("), lident, s(")")]      {fun (a) {assertVoid (a, Read (x), loc)}}                    |
                                  loc=pos kWrite e=inbr[s("("), exp, s(")")]        {fun (a) {assertVoid (a, Write (e (Val)), loc)}}             |
                                  e=inbr[s("("), exp, s(")")]                       {e}                                                          |
                                  loc=pos kWhile x=exp kDo y=exp kOd                {fun (a) {assertVoid (a, While (x (Val), y (Void)), loc)}}   |
                                  loc=pos kIf x1=exp kThen y1=exp a=(elifPat)* b=(kElse yLast=exp { yLast })? kFi {
                                      fun (attr) {
                                        var assert = fun (x1, x2, x3) { x2 };
                                        var start =
                                          case b of
                                            Some (y) -> If (x1 (Val), y1 (attr), y (attr))
                                          | _ -> assert := assertVoid; If (x1 (Val), y1 (Void), Skip)
                                          esac;
                                        var result = foldl (
                                          fun (acc, x) {
                                            case acc of
                                              If (e, s1, s2) -> If (e, s1, If (x[0] (Val), x[1] (attr), s2))
                                            esac
                                          }
                                        , start, a);
                                        assert (attr, result, loc)
                                      }
                                    } |
                                  loc=pos kDo y=exp kWhile x=exp kOd                 {fun (a) {assertVoid (a, DoWhile (y (Void), x (Val)), loc)}} |
                                  loc=pos kSkip                                      {fun (a) {assertVoid (a, Skip, loc)}}                        |
                                  loc=pos kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd {
                                      fun (a) {
                                        var result = Seq (
                                          s1 (Void),
                                          While (e (Val), Seq (s3 (Void), s2 (Void)))
                                        );
                                        assertVoid (a, result, loc)
                                      }
                                    }
                                  ),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
*)
