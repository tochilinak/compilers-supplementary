-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  --printf ("%s\n", expr.string);
  case expr of
    Assn (x_expr, expr) ->
      case eval (c, x_expr) of
        [c, x:_] -> case eval (c, expr) of
          [c, r:_] -> [[c.fst <- [x, r], c.snd], {r}]
        esac
      esac
  | Seq (e1, e2) ->
    case eval (c, e1) of
      [c, _] -> eval (c, e2)
    esac
  | Skip -> [c, {}]
  | Read (x) ->
    var y = readWorld (c.snd);
    [[c.fst <- [x, y.fst], y.snd], {}]
  | Write (expr) ->
    case eval (c, expr) of
      [c, x:_] -> [[c.fst, writeWorld (x, c.snd)], {}]
    esac
  | If (expr, stmt1, stmt2) ->
    case eval (c, expr) of
      [c, x:_] ->
        if x then eval (c, stmt1) else eval (c, stmt2) fi
    esac
  | While (expr1, expr2) ->
    var conf = c;
    var cond = 1;
    while (cond) do
      case eval (conf, expr1) of
        [c, x:_] -> cond := x; conf := c
      esac;
      if (cond) then
        conf := (eval (conf, expr2))[0]
      fi
    od;
    [conf, {}]
  | DoWhile (expr2, expr1) ->
    var conf = c;
    var cond = 1;
    while (cond) do
      conf := (eval (conf, expr2))[0];
      case eval (conf, expr1) of
        [c, x:_] -> cond := x; conf := c
      esac
    od;
    [conf, {}]
  | Var (x) -> [c, {lookup (s, x)}]
  | Ref (x) -> [c, {x}]
  | Const (n) -> [c, {n}]
  | Binop (op, l, r) ->
    case eval (c, l) of
      [c, a:_] ->
        case eval (c, r) of
          [c, b:_] ->
            [c, {evalBinop (op, a, b)}]
        esac
    esac
  | Scope (defs, expr) ->
    var scope = enterScope (s);
    var state = foldl (
      fun (acc, def) {
        case def of
          Var (vars) -> foldl (fun (acc, cur_var) { addName (acc, cur_var, 0) }, acc, vars)
        | Fun (name, args, body) -> addFunction (acc, name, args, body)
        esac
      },
      scope,
      defs
    );
    case eval ([state, w], expr) of
      [[s, w], res] -> [[leaveScope (s), w], res]
    esac
  | Call (name, args) ->
    checkFun (s, name);
    case lookup (s, name) of
      Fun (symbArgs, body) ->
        var res = foldl (
          fun ([conf, vals], [x, symbArg]) {
            case eval (conf, x) of
              [conf, value:_] -> [conf, value:vals]
            esac
          },
          [c, {}],
          zip (args, symbArgs)
        );
        (var state = res[0][0];
        var w = res[0][1];
        var vals = res[1];
        var newState = foldl (
          fun (state, [x, x_name]) {
            addName (state, x_name, x)
          },
          enterFunction (state),
          zip (reverse (vals), symbArgs)
        );
        case eval ([newState, w], body) of
          [[newState, w], xs] ->
            [[leaveFunction (state, getGlobal (newState)), w], xs]
        esac)
    esac
  | Ignore (e) ->
    case eval (c, e) of
      [c, _] -> [c, {}]
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

public fun evalBinop (op, a, b) {
  case op of
      "+" -> a + b
    | "-" -> a - b
    | "/" -> a / b
    | "%" -> a % b
    | "*" -> a * b
    | "<" -> a < b
    | ">" -> a > b
    | "<=" -> a <= b
    | ">=" -> a >= b
    | "==" -> a == b
    | "!=" -> a != b
    | "&&" -> a && b
    | "!!" -> a !! b
  esac
}
